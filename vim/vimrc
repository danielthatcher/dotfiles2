call plug#begin('~/.vim/bundle')

" Plugins
Plug 'itchyny/lightline.vim'
Plug 'tmhedberg/SimpylFold', {'for':'python'}
Plug 'vim-scripts/indentpython.vim', {'for':'python'}
Plug 'tpope/vim-fugitive'
Plug 'Yggdroot/indentLine'
Plug 'vimwiki/vimwiki'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'fatih/vim-go', {'do': ':GoUpdateBinaries'}
Plug 'SirVer/ultisnips'
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Color schemes
Plug 'https://gitlab.com/yorickpeterse/happy_hacking.vim.git'

" Local plugins
if filereadable(expand("~/.config/nvim/vimplug.local"))
    source ~/.config/nvim/vimplug.local
endif

" End vim-plug stuff
call plug#end()

" Leader
let mapleader = ","
nmap <Leader>s :set spell!<CR>

colorscheme happy_hacking

" Misc stuff
filetype plugin indent on
syntax on
set tabstop=4 shiftwidth=4 expandtab
set nu
set relativenumber
set formatoptions-=cro
set hidden
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
set wrap
set linebreak
set nohlsearch
set ignorecase
set smartcase
set conceallevel=0
let g:indentLine_setConceal = 0
set lazyredraw
set smarttab

" Window navigation
nnoremap <C-l> <C-w><C-l>
nnoremap <C-h> <C-w><C-h>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-j> <C-w><C-j>
nnoremap <C-c> <C-w>c

" Add code folding and remap to space
set foldmethod=syntax
set foldlevel=99
nnoremap <leader>f za

" Indentline configuration
let g:indentLine_color_term = 239
let g:indentLine_char = 'â”†'
let g:indentLine_enabled = 1

" Wrapping with current indentation and then a little more
set breakindent
set breakindentopt=shift:2

" Indent to multiples of the shiftwidth with < and >
set shiftround

" Keep 3 lines visible at top and bottom of screen
set scrolloff=3

" Settings for fzf
nnoremap <leader>e :Files<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>/ :BLines<CR>

" vimwiki
let g:vimwiki_list = [{'path': '~/.local/vimwiki/'}]

" Settings for lightline
let g:lightline = {
            \   'colorscheme': 'wombat',
            \   'active': {
            \       'left': [ [ 'fugitive', 'paste' ], [ 'readonly', 'filename', 'modified'] ]
            \   },
            \   'component': {
            \       'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}',
            \   },
            \   'component_visible_condition': {
            \       'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
            \   }
            \ }

" Settings for UltiSnips
let g:UltiSnipsSnippetDirectories = ['~/.config/nvim/UltiSnips', 'UltiSnips']
let g:UltiSnipsExpandTrigger="<c-space>"

" coc.nvim settings
" From README - Some servers have issues with backup files
set nobackup
set nowritebackup
set updatetime=300
set shortmess+=c
set signcolumn=yes

" Completion on tabs
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Enter to select completion
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Go settings
augroup filetype_go
    let g:go_fmt_command = "goimports"
    autocmd FileType go nmap <C-]> :GoDef<CR>
    autocmd FileType go nmap <leader>d :GoDoc<CR>
    autocmd FileType go nmap <leader>m :GoBuild<CR>
augroup END

" Python settings
augroup filetype_python
    autocmd!
    autocmd FileType python let python_highlight_all=1
augroup END

" LaTeX settings
augroup filetype_text
    autocmd!
    let g:tex_conceal="a"
    autocmd FileType tex set breakindent
    autocmd BufWritePost *.tex call jobstart('latexmk -pdf '.expand('%').' && killall -HUP mupdf')
    autocmd FileType tex command LP call jobstart('mupdf '.expand('%:r').'.pdf')
    autocmd FileType tex set synmaxcol=80
    autocmd FileType tex nnoremap j gj
    autocmd FileType tex nnoremap k gk
augroup END

" C++ settings
function AlternateFile()
    let ext = expand('%:e')
    if ext == 'h'
        e %<.cpp
    else
        e %<.h
    endif
endfunction

augroup filetype_cpp
    autocmd!
    autocmd FileType cpp let b:ale_linters = ['gcc']
    autocmd Filetype cpp nmap <Leader>m :make<CR>
    autocmd Filetype cpp nmap <Leader>s :silent call AlternateFile()<CR>
augroup END

" Load in local vimrc
if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
endif
