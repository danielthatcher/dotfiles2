call plug#begin('~/.vim/bundle')

" Plugins
Plug 'itchyny/lightline.vim'
Plug 'tmhedberg/SimpylFold', {'for':'python'}
Plug 'vim-scripts/indentpython.vim', {'for':'python'}
Plug 'Yggdroot/indentLine'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'fatih/vim-go', {'do': ':GoUpdateBinaries'}
Plug 'SirVer/ultisnips'
Plug 'jiangmiao/auto-pairs'
Plug 'neovim/nvim-lspconfig'

" nvim-cmp settings
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'
Plug 'hrsh7th/nvim-cmp'
Plug 'quangnguyen30192/cmp-nvim-ultisnips'

" Color schemes
Plug 'https://gitlab.com/yorickpeterse/happy_hacking.vim.git'

" Local plugins
if filereadable(expand("~/.config/nvim/vimplug.local"))
    source ~/.config/nvim/vimplug.local
endif

" End vim-plug stuff
call plug#end()

" Leader
let mapleader = ","
nmap <Leader>s :set spell!<CR>

colorscheme happy_hacking

" Misc stuff
filetype plugin indent on
syntax on
set tabstop=4 shiftwidth=4 expandtab
set nu
set relativenumber
set formatoptions-=cro
set hidden
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
set wrap
set linebreak
set nohlsearch
set ignorecase
set smartcase
set conceallevel=0
let g:indentLine_setConceal = 0
set lazyredraw
set smarttab

" Window navigation
nnoremap <C-l> <C-w><C-l>
nnoremap <C-h> <C-w><C-h>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-j> <C-w><C-j>
nnoremap <C-c> <C-w>c

" Add code folding and remap to space
set foldmethod=syntax
set foldlevel=99
nnoremap <leader>f za

" Indentline configuration
let g:indentLine_color_term = 239
let g:indentLine_char = 'â”†'
let g:indentLine_enabled = 1

" Wrapping with current indentation and then a little more
set breakindent
set breakindentopt=shift:2

" Indent to multiples of the shiftwidth with < and >
set shiftround

" Keep 3 lines visible at top and bottom of screen
set scrolloff=3

" Settings for fzf
nnoremap <leader>e :Files<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>l :BLines<CR>

" Settings for lightline
let g:lightline = {
            \   'colorscheme': 'wombat',
            \   'active': {
            \       'left': [ [ 'fugitive', 'paste' ], [ 'readonly', 'filename', 'modified'] ]
            \   },
            \   'component': {
            \       'fugitive': '%{exists("*fugitive#head")?fugitive#head():""}',
            \   },
            \   'component_visible_condition': {
            \       'fugitive': '(exists("*fugitive#head") && ""!=fugitive#head())'
            \   }
            \ }

" Settings for UltiSnips
let g:UltiSnipsSnippetDirectories = ['~/.config/nvim/UltiSnips', 'UltiSnips']
let g:UltiSnipsExpandTrigger="<c-space>"

" cmp settings
set completeopt=menu,menuone
lua <<EOF
    local cmp = require'cmp'
    -- Main setup
    cmp.setup({
        snippet = {
            expand = function(args)
                vim.fn["UltiSnips#Anon"](args.body)
            end
        },
        window = {},
        mapping = cmp.mapping.preset.insert({
            ['<C-Space>'] = cmp.mapping.complete(),
            ['<CR>'] = cmp.mapping.confirm({ select = false }),
            ['<Tab>'] = cmp.mapping(cmp.mapping.select_next_item(), { 'i', 's' }),
            ['<S-Tab>'] = cmp.mapping(cmp.mapping.select_prev_item(), { 'i', 's' }),
        }),
        sources = cmp.config.sources({
            { name = 'nvim_lsp' },
            { name = 'ultisnips' },
        }, {
            { name = 'buffer' },
        }),
    })

    -- vim cmdline completion
    cmp.setup.cmdline(':', {
        mapping = cmp.mapping.preset.cmdline(),
        sources = cmp.config.sources({
            { name = 'path' },
        }, {
            { name = 'cmdline' },
        })
    })

    -- lspconfig
    local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
    require('lspconfig')['gopls'].setup { capabilities = capabilities }
    require('lspconfig')['pyright'].setup { capabilities = capabilities }
EOF


" Go settings
augroup filetype_go
    let g:go_fmt_command = "goimports"
    autocmd FileType go nmap <C-]> :GoDef<CR>
    autocmd FileType go nmap <leader>d :GoDoc<CR>
    autocmd FileType go nmap <leader>m :GoBuild<CR>
augroup END

" Python settings
augroup filetype_python
    autocmd!
    autocmd FileType python let python_highlight_all=1
augroup END

" LaTeX settings
augroup filetype_text
    autocmd!
    let g:tex_conceal="a"
    autocmd FileType tex set breakindent
    autocmd BufWritePost *.tex call jobstart('latexmk -pdf '.expand('%').' && killall -HUP mupdf')
    autocmd FileType tex command LP call jobstart('mupdf '.expand('%:r').'.pdf')
    autocmd FileType tex set synmaxcol=80
    autocmd FileType tex nnoremap j gj
    autocmd FileType tex nnoremap k gk
augroup END

" C++ settings
function AlternateFile()
    let ext = expand('%:e')
    if ext == 'h'
        e %<.cpp
    else
        e %<.h
    endif
endfunction

augroup filetype_cpp
    autocmd!
    autocmd FileType cpp let b:ale_linters = ['gcc']
    autocmd Filetype cpp nmap <Leader>m :make<CR>
    autocmd Filetype cpp nmap <Leader>s :silent call AlternateFile()<CR>
augroup END

" Load in local vimrc
if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
endif
